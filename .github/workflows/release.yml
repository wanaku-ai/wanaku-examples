name: release

on:
  workflow_dispatch:
    inputs:
      currentDevelopmentVersion:
        description: 'The current development version'
        required: true
      nextDevelopmentVersion:
        description: 'The next development version'
        required: true

jobs:
  perform-release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
          cache: maven

      - name: Create release
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        run: |
          mvn versions:set -DnewVersion="${{ github.event.inputs.currentDevelopmentVersion }}"
          mvn versions:commit
          git commit -m "Prepare for release" .
          mvn -Pdist clean package
          git tag wanaku-${{ github.event.inputs.currentDevelopmentVersion }}
          git push origin wanaku-${{ github.event.inputs.currentDevelopmentVersion }}
          mvn versions:set -DnewVersion=${{ github.event.inputs.nextDevelopmentVersion }}
          mvn versions:commit
          git commit -m "Prepare for the next version" .
          git push origin main

  release-artifacts:
    name: Release artifacts
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        experimental: [ false ]
        include:
          - os: [ macos-latest ]
            experimental: true
      fail-fast: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: wanaku-${{ github.event.inputs.currentDevelopmentVersion }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
          cache: maven
      - name: Set arch
        id: arch
        run: echo "arch=$(uname -m)" >> $GITHUB_OUTPUT
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Create a release build with container push (x86)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mvn -Dnative -Pdist \
          -Dquarkus.container-image.build=true \
          -Dquarkus.container-image.push=true \
          -Dquarkus.container-image.tag=${{ github.ref_name }}-${{ steps.arch.outputs.arch }} \
          -Dquarkus.jib.platforms=linux/amd64 \
          clean package
      - name: Create a release build with container push (x86)
        if: matrix.os != 'ubuntu-latest'
        run: |
          mvn -Dnative -Pdist \
          -Dquarkus.container-image.build=true \
          -Dquarkus.container-image.push=true \
          -Dquarkus.container-image.tag=${{ github.ref_name }}-${{ steps.arch.outputs.arch }} \
          -Dquarkus.jib.platforms=linux/arm64/v8 \
          clean package

      - name: Run JReleaser
        uses: jreleaser/release-action@v2
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_PROJECT_VERSION: ${{ github.event.inputs.currentDevelopmentVersion }}
          JRELEASER_SELECT_CURRENT_PLATFORM: true
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      # Persist logs

      - name: JReleaser release output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-release-${{ matrix.os }}
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

    createManifests:
      needs: release-build
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - name: Login to Container Registry
          uses: docker/login-action@v3
          with:
            registry: quay.io
            username: ${{ secrets.QUAY_USERNAME }}
            password: ${{ secrets.QUAY_PASSWORD }}
        - name: Build and Publish (x86)
          run: |
            ./build-manifests.sh ${{ github.ref_name }}